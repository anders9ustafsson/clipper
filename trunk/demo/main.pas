unit main;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, GR32, GR32_Image, ComCtrls, ExtCtrls,
  GR32_Misc, GR32_Polygons, GR32_PolygonsEx, GR32_VPR, Clipper;

type
  TMainForm = class(TForm)
    Panel1: TPanel;
    StatusBar1: TStatusBar;
    ImgView321: TImgView32;
    GroupBox1: TGroupBox;
    rbIntersection: TRadioButton;
    rbUnion: TRadioButton;
    rbDifference: TRadioButton;
    rbXOR: TRadioButton;
    rbStatic: TRadioButton;
    bExit: TButton;
    Timer1: TTimer;
    rbNone: TRadioButton;
    gbRandom: TGroupBox;
    lblSubjCount: TLabel;
    lblClipCount: TLabel;
    tbSubj: TTrackBar;
    tbClip: TTrackBar;
    rbRandom1: TRadioButton;
    bNext: TButton;
    bStart: TButton;
    bStop: TButton;
    tbClipOpacity: TTrackBar;
    lblClipOpacity: TLabel;
    lblSubjOpacity: TLabel;
    tbSubjOpacity: TTrackBar;
    rbRandom2: TRadioButton;
    rbEvenOdd: TRadioButton;
    rbNonZero: TRadioButton;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure ImgView321Resize(Sender: TObject);
    procedure rbIntersectionClick(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure tbSubjChange(Sender: TObject);
    procedure bNextClick(Sender: TObject);
    procedure bStartClick(Sender: TObject);
    procedure bStopClick(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure bExitClick(Sender: TObject);
    procedure tbClipOpacityChange(Sender: TObject);
    procedure rbStaticClick(Sender: TObject);
    procedure tbSubjOpacityChange(Sender: TObject);
    procedure rbEvenOddClick(Sender: TObject);
  private
    clipper: TClipper;
    function GetFillType: TPolyFillType;
    function GetOpType: TClipType;
    procedure ShowStaticPolys;
    procedure ShowRandomPolys1(newPoly: boolean);
    procedure ShowRandomPolys2(newPoly: boolean);
    procedure RePaintBitmap;
  public
    { Public declarations }
  end;

function MakeArrayOfFloatPoints(const a: array of single): TArrayOfFloatPoint;
function polygon: TArrayOfArrayOfFloatPoint;
function clipping: TArrayOfArrayOfFloatPoint;
function australia: TArrayOfArrayOfFloatPoint;

var
  MainForm: TMainForm;

implementation

const
  subjClr32 = $00AAFFFF;
  clipClr32 = $00FFFFCC;
  edgeClr32 = $FFA0A0A0;
  maskClr32 = $20000000;//$CCCCCCCC;

var
  subj: TArrayOfArrayOfFloatPoint = nil;
  clip: TArrayOfArrayOfFloatPoint = nil;
  solution: TArrayOfArrayOfFloatPoint = nil;
  subjOpacity: cardinal = $FF000000;
  clipOpacity: cardinal = $FF000000;

{$R *.dfm}

//------------------------------------------------------------------------------

function MakeArrayOfFloatPoints(const a: array of single): TArrayOfFloatPoint;
var
  i, len: integer;
begin
  len := length(a) div 2;
  setlength(result, len);
  if len = 0 then exit;
  for i := 0 to len -1 do
  begin
    result[i].X := a[i*2];
    result[i].Y := a[i*2 +1];
  end;
end;

//------------------------------------------------------------------------------
//  TMainForm methods
//------------------------------------------------------------------------------

procedure TMainForm.FormCreate(Sender: TObject);
begin
  clipper := TClipper.create;
  tbSubjOpacity.Position := 128;
  tbClipOpacity.Position := 128;
  Randomize;
end;
//------------------------------------------------------------------------------

procedure TMainForm.FormDestroy(Sender: TObject);
begin
  clipper.Free;
end;
//------------------------------------------------------------------------------

procedure TMainForm.bExitClick(Sender: TObject);
begin
  Timer1.Enabled := false;
  close;
end;
//------------------------------------------------------------------------------

procedure TMainForm.ImgView321Resize(Sender: TObject);
begin
  ImgView321.SetupBitmap(true, clWhite32);
end;
//------------------------------------------------------------------------------

procedure TMainForm.RepaintBitmap;
begin
  ImgView321.Bitmap.Clear(clWhite32);

  if rbEvenOdd.Checked then
    PolyPolygonFS(ImgView321.Bitmap, subj, subjClr32 or subjOpacity, pfAlternate) else
    PolyPolygonFS(ImgView321.Bitmap, subj, subjClr32 or subjOpacity, pfWinding);
  PolyPolylineFS(ImgView321.Bitmap, subj, (edgeClr32 and $00FFFFFF) or subjOpacity, true);
  if rbEvenOdd.Checked then
    PolyPolygonFS(ImgView321.Bitmap, clip, clipClr32 or clipOpacity, pfAlternate) else
    PolyPolygonFS(ImgView321.Bitmap, clip, clipClr32 or clipOpacity, pfWinding);
  PolyPolylineFS(ImgView321.Bitmap, clip, (edgeClr32 and $00FFFFFF) or clipOpacity, true);
  if assigned(solution) and not rbNone.Checked then
  begin
    PolyPolygonFS(ImgView321.Bitmap, solution, maskClr32);
    //now add a 3D effect to the solution to make it stand out ...
    Simple3D(ImgView321.Bitmap,
      FixedPoints(solution),6,6,MAXIMUM_SHADOW_FADE,clWhite32,$80000000);
    PolyPolylineFS(ImgView321.Bitmap, solution, clGray32, true);
  end;
  ImgView321.Repaint;
end;
//------------------------------------------------------------------------------

function TMainForm.GetFillType: TPolyFillType;
begin
  if rbEvenOdd.checked then result := pftEvenOdd else result := pftNonZero;
end;
//------------------------------------------------------------------------------

function TMainForm.GetOpType: TClipType;
begin
  if rbIntersection.Checked then result := ctIntersection
  else if rbUnion.Checked then result := ctUnion
  else if rbDifference.Checked then result := ctDifference
  else result := ctXor;
end;
//------------------------------------------------------------------------------

procedure TMainForm.tbSubjOpacityChange(Sender: TObject);
begin
  lblSubjOpacity.Caption := format('Subj &Opacity (%d):',[tbSubjOpacity.Position]);
  subjOpacity := tbSubjOpacity.Position shl 24;
  RePaintBitmap;
end;
//------------------------------------------------------------------------------

procedure TMainForm.tbClipOpacityChange(Sender: TObject);
begin
  lblClipOpacity.Caption := format('Clip &Opacity (%d):',[tbClipOpacity.Position]);
  clipOpacity := tbClipOpacity.Position shl 24;
  RePaintBitmap;
end;
//------------------------------------------------------------------------------

procedure TMainForm.rbStaticClick(Sender: TObject);
begin
  if rbStatic.Checked then
  begin
    Timer1.Enabled := false;
    ShowStaticPolys;
  end else if rbRandom1.Checked then
    ShowRandomPolys1(true)
  else
    ShowRandomPolys2(true);

  rbNonZero.Enabled := not rbStatic.Checked;
  rbEvenOdd.Enabled := not rbStatic.Checked;
  lblSubjCount.Enabled := rbRandom1.Checked;
  tbSubj.Enabled := rbRandom1.Checked;
  tbClip.Enabled := not rbStatic.Checked;
  lblClipCount.Enabled := not rbStatic.Checked;

  bNext.Enabled := not rbStatic.Checked and not Timer1.Enabled;
  bStart.Enabled := bNext.Enabled;
  bStop.Enabled := Timer1.Enabled;
end;
//------------------------------------------------------------------------------

procedure TMainForm.rbIntersectionClick(Sender: TObject);
begin
  if rbStatic.Checked then ShowStaticPolys
  else if rbRandom1.Checked then ShowRandomPolys1(false)
  else ShowRandomPolys2(false);
end;
//------------------------------------------------------------------------------

procedure TMainForm.bNextClick(Sender: TObject);
begin
  if rbRandom1.Checked then ShowRandomPolys1(true)
  else ShowRandomPolys2(true);
end;
//------------------------------------------------------------------------------

procedure TMainForm.bStartClick(Sender: TObject);
begin
  Timer1.Enabled := true;
  bStart.Enabled := false;
  bStop.Enabled := true;
  bNext.Enabled := false;
end;
//------------------------------------------------------------------------------

procedure TMainForm.bStopClick(Sender: TObject);
begin
  Timer1.Enabled := false;
  bStart.Enabled := true;
  bStop.Enabled := false;
  bNext.Enabled := true;
end;
//------------------------------------------------------------------------------

procedure TMainForm.Timer1Timer(Sender: TObject);
begin
  if rbRandom1.Checked then ShowRandomPolys1(true)
  else ShowRandomPolys2(true);
end;
//------------------------------------------------------------------------------

procedure TMainForm.FormResize(Sender: TObject);
begin
  if visible then rbIntersectionClick(nil);
end;
//------------------------------------------------------------------------------

procedure TMainForm.tbSubjChange(Sender: TObject);
begin
  lblSubjCount.Caption := format('Random Subj Count (%d):',[tbSubj.Position]);
  lblClipCount.Caption := format('Random Clip Count (%d):',[tbClip.Position]);
  if not bNext.Enabled then exit;
  //only update random polygons once the mouse has been released ...
  if (GetAsyncKeyState(VK_LBUTTON) < 0) then exit;
  if rbRandom1.Checked then ShowRandomPolys1(true)
  else ShowRandomPolys2(true);
end;
//------------------------------------------------------------------------------

procedure TMainForm.rbEvenOddClick(Sender: TObject);
begin
  if rbRandom1.Checked then ShowRandomPolys1(false)
  else ShowRandomPolys2(false);
end;
//------------------------------------------------------------------------------

procedure TMainForm.ShowStaticPolys;
begin
  solution := nil;
  subj := polygon;  //fills subj with an array of predefined polygons
  clip := clipping; //fills clip with an array of predefined polygons
  RepaintBitmap;

  with clipper do
  begin
    clear;
    AddPolyPolygon(subj, ptSubject);
    AddPolyPolygon(clip, ptClip);
    if Execute(GetOpType, solution) then
      RePaintBitmap;
  end;
end;
//------------------------------------------------------------------------------

procedure TMainForm.ShowRandomPolys1(newPoly: boolean);
var
  i,highI,w,h: integer;
  fillType: TPolyFillType;
begin
  w := (ImgView321.ClientWidth -30);
  h := (ImgView321.ClientHeight -30);
  fillType := GetFillType;

  if newPoly then
  begin
    solution := nil;
    //nb: although for this demo I chose to display just one random subject
    //and one random clip polygon, it would be very easy to make multiple
    //subject and clip polygons here. Clipper would handle them just as easily
    //(as is demonstrated in ShowStaticPolys).
    setLength(subj, 1);
    highI := tbSubj.Position -1;
    setLength(subj[0], highI+1);
    for i := 0 to highI do
      subj[0][i] := FloatPoint(10+round(random*w), 10+round(random*h));
    setLength(clip, 1);
    highI := tbClip.Position - 1;
    setLength(clip[0], highI+1);
    for i := 0 to highI do
      clip[0][i] := FloatPoint(10+round(random*w), 10+round(random*h));
  end;

  with clipper do
  begin
    ForceOrientation := false;
    clear;
    AddPolyPolygon(subj, ptSubject);
    AddPolyPolygon(clip, ptClip);
    Execute(GetOpType, solution, fillType, fillType);
  end;
  RePaintBitmap;
end;
//------------------------------------------------------------------------------

procedure TMainForm.ShowRandomPolys2(newPoly: boolean);
var
  i,j, w,h: integer;
  pt: TFloatPoint;
  rec: TFloatRect;
  fillType: TPolyFillType;
begin

  w := (ImgView321.ClientWidth -30);
  h := (ImgView321.ClientHeight -30);
  fillType := GetFillType;

  if newPoly then
  begin
    solution := nil;
    subj := australia;

    //make bubbles for clip ...
    setlength(clip, tbClip.Position);
    for i := 0 to high(clip) do
    begin
      pt := FloatPoint(random*(w-100) +50, random*(h-100) +50);
      j := round(random*45) + 5;
      rec := FloatRect(pt.X -j, pt.Y - j, pt.X +j, pt.Y + j);
      clip[i] := GetEllipsePoints(rec);
    end;
  end;

  with clipper do
  begin
    ForceOrientation := false;
    clear;
    AddPolyPolygon(subj, ptSubject);
    AddPolyPolygon(clip, ptClip);
    Execute(GetOpType, solution, fillType, fillType);
  end;
  RePaintBitmap;
end;
//------------------------------------------------------------------------------

function polygon: TArrayOfArrayOfFloatPoint;
begin
  SetLength(result, 12);
  result[0] := MakeArrayOfFloatPoints([
28.28,318.81,
28.28,204.94,
35.12,204.80,
42.54,204.39,
50.53,203.70,
59.11,202.73,
59.11,215.58,
61.34,212.55,
63.69,209.92,
66.16,207.70,
68.74,205.89,
71.44,204.47,
74.26,203.46,
77.19,202.86,
80.23,202.66,
83.46,202.85,
86.53,203.41,
89.43,204.36,
92.16,205.69,
94.72,207.39,
97.13,209.48,
99.36,211.94,
101.43,214.78,
103.29,217.94,
104.91,221.36,
106.27,225.03,
107.39,228.96,
108.26,233.15,
108.88,237.59,
109.25,242.29,
109.38,247.25,
109.26,252.70,
108.91,257.80,
108.32,262.55,
107.50,266.95,
106.45,271.00,
105.16,274.69,
103.64,278.03,
101.88,281.02,
99.89,283.66,
97.66,285.95,
95.20,287.88,
92.51,289.47,
89.58,290.70,
86.42,291.58,
83.02,292.11,
79.39,292.28,
76.37,292.14,
73.49,291.70,
70.75,290.97,
68.15,289.96,
65.68,288.65,
63.35,287.05,
61.16,285.16,
59.11,282.98,
59.11,318.81
  ]);

  result[1] := MakeArrayOfFloatPoints([
69.00,215.08,
67.76,215.20,
66.60,215.57,
65.52,216.19,
64.52,217.06,
63.60,218.18,
62.76,219.54,
62.00,221.16,
61.32,223.02,
60.72,225.12,
60.20,227.48,
59.77,230.08,
59.41,232.94,
59.13,236.04,
58.93,239.39,
58.81,242.98,
58.77,246.83,
58.80,250.83,
58.92,254.57,
59.11,258.05,
59.38,261.28,
59.72,264.25,
60.15,266.96,
60.64,269.41,
61.22,271.60,
61.87,273.54,
62.60,275.21,
63.40,276.63,
64.29,277.79,
65.24,278.70,
66.28,279.34,
67.39,279.73,
68.58,279.86,
69.64,279.73,
70.64,279.34,
71.56,278.70,
72.42,277.79,
73.21,276.63,
73.93,275.21,
74.58,273.54,
75.16,271.60,
75.68,269.41,
76.12,266.96,
76.50,264.25,
76.81,261.28,
77.05,258.05,
77.22,254.57,
77.33,250.83,
77.36,246.83,
77.33,242.98,
77.23,239.39,
77.07,236.04,
76.84,232.94,
76.54,230.08,
76.18,227.48,
75.76,225.12,
75.27,223.02,
74.71,221.16,
74.09,219.54,
73.41,218.18,
72.66,217.06,
71.84,216.19,
70.96,215.57,
70.01,215.20,
69.00,215.08
  ]);

  result[2] := MakeArrayOfFloatPoints([
160.88,202.66,
165.99,202.83,
170.78,203.35,
175.23,204.22,
179.36,205.44,
183.16,207.01,
186.62,208.93,
189.76,211.19,
192.56,213.80,
195.04,216.77,
197.18,220.08,
199.00,223.73,
200.48,227.74,
201.64,232.10,
202.46,236.80,
202.96,241.85,
203.13,247.25,
202.96,252.65,
202.46,257.71,
201.64,262.41,
200.48,266.77,
199.00,270.77,
197.18,274.43,
195.04,277.74,
192.56,280.71,
189.76,283.32,
186.62,285.59,
183.16,287.50,
179.36,289.07,
175.23,290.29,
170.78,291.16,
165.99,291.69,
160.88,291.86,
155.75,291.69,
150.96,291.16,
146.50,290.29,
142.36,289.07,
138.56,287.50,
135.09,285.59,
131.95,283.32,
129.14,280.71,
126.66,277.74,
124.51,274.43,
122.69,270.77,
121.21,266.77,
120.05,262.41,
119.22,257.71,
118.73,252.65,
118.56,247.25,
118.73,241.85,
119.22,236.80,
120.05,232.10,
121.21,227.74,
122.69,223.73,
124.51,220.08,
126.66,216.77,
129.14,213.80,
131.95,211.19,
135.09,208.93,
138.56,207.01,
142.36,205.44,
146.50,204.22,
150.96,203.35,
155.75,202.83,
160.88,202.66
  ]);

  result[3] := MakeArrayOfFloatPoints([
160.80,210.17,
159.56,210.32,
158.40,210.75,
157.32,211.48,
156.33,212.49,
155.41,213.79,
154.57,215.39,
153.81,217.27,
153.13,219.44,
152.53,221.90,
152.02,224.66,
151.58,227.70,
151.22,231.03,
150.94,234.65,
150.74,238.56,
150.62,242.76,
150.58,247.25,
150.62,251.74,
150.74,255.94,
150.94,259.86,
151.22,263.48,
151.58,266.81,
152.02,269.85,
152.53,272.61,
153.13,275.07,
153.81,277.24,
154.57,279.13,
155.41,280.72,
156.33,282.03,
157.32,283.04,
158.40,283.76,
159.56,284.20,
160.80,284.34,
162.05,284.20,
163.21,283.76,
164.30,283.04,
165.31,282.03,
166.24,280.72,
167.08,279.13,
167.85,277.24,
168.53,275.07,
169.14,272.61,
169.66,269.85,
170.10,266.81,
170.46,263.48,
170.75,259.86,
170.95,255.94,
171.07,251.74,
171.11,247.25,
171.07,242.76,
170.95,238.56,
170.75,234.65,
170.46,231.03,
170.10,227.70,
169.66,224.66,
169.14,221.90,
168.53,219.44,
167.85,217.27,
167.08,215.39,
166.24,213.79,
165.31,212.49,
164.30,211.48,
163.21,210.75,
162.05,210.32,
160.80,210.17
  ]);

  result[4] := MakeArrayOfFloatPoints([
247.11,173.00,
247.11,290.00,
216.28,290.00,
216.28,174.69,
222.99,174.58,
230.36,174.27,
238.40,173.74,
247.11,173.00
  ]);

  result[5] := MakeArrayOfFloatPoints([
336.08,204.84,
297.05,300.98,
294.96,305.62,
292.69,309.63,
290.25,313.03,
287.63,315.81,
284.84,317.97,
281.88,319.51,
278.74,320.44,
275.42,320.75,
272.26,320.57,
269.36,320.05,
266.73,319.17,
264.36,317.94,
262.25,316.36,
260.41,314.43,
258.83,312.15,
257.52,309.52,
268.17,301.83,
268.56,304.11,
269.09,306.08,
269.77,307.75,
270.60,309.12,
271.57,310.18,
272.68,310.94,
273.94,311.40,
275.34,311.55,
276.97,311.37,
278.52,310.84,
279.99,309.97,
281.38,308.74,
282.69,307.16,
283.93,305.23,
285.08,302.95,
286.16,300.31,
288.44,294.22,
254.14,204.84,
288.02,204.84,
305.16,254.94,
324.67,204.84
  ]);

  result[6] := MakeArrayOfFloatPoints([
398.03,205.70,
403.08,208.13,
407.46,210.83,
411.16,213.78,
414.19,217.00,
416.55,220.47,
418.23,224.21,
419.24,228.21,
419.58,232.47,
419.41,235.31,
418.90,238.05,
418.06,240.68,
416.88,243.20,
415.35,245.62,
413.50,247.93,
411.30,250.14,
408.77,252.24,
405.99,254.16,
403.08,255.83,
400.03,257.24,
396.83,258.39,
393.50,259.29,
390.02,259.93,
386.41,260.31,
382.66,260.44,
379.44,260.34,
375.71,260.05,
371.46,259.58,
366.69,258.91,
364.14,260.60,
362.32,262.29,
361.22,263.98,
360.86,265.67,
360.97,266.76,
361.31,267.70,
361.87,268.50,
362.66,269.15,
363.67,269.66,
364.90,270.02,
366.36,270.24,
368.05,270.31,
369.21,270.29,
370.86,270.23,
372.97,270.13,
375.56,269.98,
379.01,269.76,
382.22,269.57,
385.18,269.41,
387.90,269.28,
390.37,269.18,
392.61,269.11,
394.60,269.06,
396.34,269.05,
400.07,269.14,
403.55,269.41,
406.79,269.87,
409.80,270.50,
412.56,271.32,
415.08,272.33,
417.36,273.51,
419.41,274.88,
421.21,276.42,
422.77,278.15,
424.09,280.07,
425.17,282.16,
426.01,284.44,
426.61,286.90,
426.97,289.54,
427.09,292.36,
426.89,295.78,
426.30,298.97,
425.30,301.95,
423.91,304.71,
422.12,307.24,
419.93,309.56,
417.34,311.65,
414.36,313.52,
410.98,315.18,
407.20,316.61,
403.02,317.82,
398.44,318.81,
393.47,319.59,
388.09,320.14,
382.32,320.47,
376.16,320.58,
371.56,320.52,
367.26,320.33,
363.26,320.02,
359.56,319.58,
356.15,319.02,
353.04,318.33,
350.22,317.52,
347.70,316.59,
345.48,315.53,
343.55,314.34,
341.92,313.03,
340.59,311.60,
339.55,310.04,
338.81,308.35,
338.37,306.54,
338.22,304.61,
338.46,302.40,
339.18,300.38,
340.38,298.54,
342.06,296.88,
344.22,295.41,
346.87,294.13,
349.99,293.03,
353.59,292.11,
349.75,290.94,
346.42,289.60,
343.61,288.08,
341.30,286.38,
339.51,284.51,
338.23,282.46,
337.46,280.23,
337.20,277.83,
337.51,274.77,
338.42,271.81,
339.95,268.94,
342.08,266.16,
344.83,263.47,
348.18,260.87,
352.14,258.37,
356.72,255.95,
352.70,254.07,
349.22,251.88,
346.27,249.40,
343.86,246.60,
341.99,243.50,
340.65,240.10,
339.85,236.40,
339.58,232.39,
339.74,229.29,
340.23,226.31,
341.04,223.46,
342.18,220.74,
343.64,218.15,
345.42,215.69,
347.53,213.36,
349.97,211.15,
352.64,209.14,
355.48,207.40,
358.46,205.93,
361.61,204.72,
364.90,203.78,
368.36,203.11,
371.97,202.71,
375.73,202.58,
378.56,202.65,
381.79,202.85,
385.44,203.19,
389.50,203.67,
389.18,201.03,
389.08,199.02,
389.15,196.99,
389.35,195.10,
389.69,193.33,
390.17,191.70,
390.79,190.20,
391.54,188.83,
392.42,187.59,
393.45,186.48,
394.61,185.50,
395.91,184.65,
397.34,183.93,
398.91,183.34,
400.62,182.88,
402.46,182.56,
404.45,182.36,
406.56,182.30,
409.83,182.48,
412.66,183.03,
415.06,183.95,
417.02,185.23,
418.54,186.88,
419.63,188.90,
420.28,191.28,
420.50,194.03,
420.37,196.13,
419.98,197.96,
419.32,199.50,
418.41,200.76,
417.23,201.74,
415.80,202.44,
414.10,202.86,
412.14,203.00,
410.68,202.88,
409.09,202.54,
407.38,201.95,
405.55,201.14,
404.44,200.62,
403.48,200.23,
402.67,199.98,
402.00,199.88,
401.07,199.91,
400.26,200.14,
399.58,200.57,
399.02,201.20,
398.59,202.03,
398.28,203.05,
398.09,204.28,
398.03,205.70
  ]);

  result[7] := MakeArrayOfFloatPoints([
379.03,210.94,
377.01,211.27,
375.26,212.28,
373.78,213.95,
372.56,216.30,
371.62,219.32,
370.95,223.00,
370.54,227.36,
370.41,232.39,
370.55,237.00,
370.97,241.00,
371.67,244.39,
372.64,247.16,
373.90,249.31,
375.44,250.85,
377.26,251.77,
379.36,252.08,
381.28,251.80,
382.95,250.98,
384.36,249.62,
385.51,247.70,
386.41,245.24,
387.05,242.23,
387.43,238.68,
387.56,234.58,
387.53,231.72,
387.43,229.04,
387.26,226.54,
387.03,224.24,
386.73,222.11,
386.36,220.17,
385.93,218.42,
385.43,216.85,
384.86,215.46,
384.23,214.26,
383.53,213.25,
382.76,212.42,
381.93,211.77,
381.03,211.31,
380.06,211.03,
379.03,210.94
  ]);

  result[8] := MakeArrayOfFloatPoints([
378.17,295.58,
373.13,295.71,
368.75,296.10,
365.05,296.75,
362.02,297.67,
359.67,298.84,
357.99,300.28,
356.98,301.98,
356.64,303.94,
356.97,305.88,
357.94,307.56,
359.57,308.98,
361.86,310.15,
364.79,311.05,
368.37,311.70,
372.61,312.09,
377.50,312.22,
380.44,312.18,
383.18,312.07,
385.74,311.89,
388.11,311.64,
390.29,311.31,
392.28,310.91,
394.08,310.44,
395.69,309.89,
397.11,309.28,
398.34,308.59,
399.38,307.82,
400.23,306.99,
400.90,306.08,
401.37,305.10,
401.66,304.05,
401.75,302.92,
401.38,301.20,
400.28,299.71,
398.43,298.45,
395.86,297.41,
392.54,296.61,
388.49,296.04,
383.70,295.69,
378.17,295.58
  ]);

  result[9] := MakeArrayOfFloatPoints([
473.88,202.66,
478.99,202.83,
483.78,203.35,
488.23,204.22,
492.36,205.44,
496.16,207.01,
499.62,208.93,
502.76,211.19,
505.56,213.80,
508.04,216.77,
510.18,220.08,
512.00,223.73,
513.48,227.74,
514.64,232.10,
515.46,236.80,
515.96,241.85,
516.13,247.25,
515.96,252.65,
515.46,257.71,
514.64,262.41,
513.48,266.77,
512.00,270.77,
510.18,274.43,
508.04,277.74,
505.56,280.71,
502.76,283.32,
499.62,285.59,
496.16,287.50,
492.36,289.07,
488.23,290.29,
483.78,291.16,
478.99,291.69,
473.88,291.86,
468.75,291.69,
463.96,291.16,
459.50,290.29,
455.36,289.07,
451.56,287.50,
448.09,285.59,
444.95,283.32,
442.14,280.71,
439.66,277.74,
437.51,274.43,
435.69,270.77,
434.21,266.77,
433.05,262.41,
432.22,257.71,
431.73,252.65,
431.56,247.25,
431.73,241.85,
432.22,236.80,
433.05,232.10,
434.21,227.74,
435.69,223.73,
437.51,220.08,
439.66,216.77,
442.14,213.80,
444.95,211.19,
448.09,208.93,
451.56,207.01,
455.36,205.44,
459.50,204.22,
463.96,203.35,
468.75,202.83,
473.88,202.66
  ]);

  result[10] := MakeArrayOfFloatPoints([
473.80,210.17,
472.56,210.32,
471.40,210.75,
470.32,211.48,
469.33,212.49,
468.41,213.79,
467.57,215.39,
466.81,217.27,
466.13,219.44,
465.53,221.90,
465.02,224.66,
464.58,227.70,
464.22,231.03,
463.94,234.65,
463.74,238.56,
463.62,242.76,
463.58,247.25,
463.62,251.74,
463.74,255.94,
463.94,259.86,
464.22,263.48,
464.58,266.81,
465.02,269.85,
465.53,272.61,
466.13,275.07,
466.81,277.24,
467.57,279.13,
468.41,280.72,
469.33,282.03,
470.32,283.04,
471.40,283.76,
472.56,284.20,
473.80,284.34,
475.05,284.20,
476.21,283.76,
477.30,283.04,
478.31,282.03,
479.24,280.72,
480.08,279.13,
480.85,277.24,
481.53,275.07,
482.14,272.61,
482.66,269.85,
483.10,266.81,
483.46,263.48,
483.75,259.86,
483.95,255.94,
484.07,251.74,
484.11,247.25,
484.07,242.76,
483.95,238.56,
483.75,234.65,
483.46,231.03,
483.10,227.70,
482.66,224.66,
482.14,221.90,
481.53,219.44,
480.85,217.27,
480.08,215.39,
479.24,213.79,
478.31,212.49,
477.30,211.48,
476.21,210.75,
475.05,210.32,
473.80,210.17
  ]);

  result[11] := MakeArrayOfFloatPoints([
610.03,290.00,
579.20,290.00,
579.20,227.48,
579.12,225.25,
578.87,223.31,
578.45,221.67,
577.87,220.32,
577.12,219.28,
576.21,218.53,
575.12,218.09,
573.88,217.94,
572.55,218.06,
571.26,218.41,
570.02,219.00,
568.83,219.83,
567.68,220.89,
566.57,222.19,
565.51,223.73,
564.50,225.50,
562.76,229.45,
561.52,233.75,
560.78,238.39,
560.53,243.38,
560.53,290.00,
529.70,290.00,
529.70,204.69,
537.58,204.56,
545.35,204.16,
553.00,203.50,
560.53,202.58,
560.53,218.53,
563.48,214.81,
566.59,211.59,
569.86,208.86,
573.29,206.63,
576.87,204.89,
580.61,203.65,
584.52,202.90,
588.58,202.66,
591.18,202.74,
593.61,203.00,
595.87,203.42,
597.96,204.02,
599.89,204.78,
601.65,205.72,
603.24,206.83,
604.67,208.11,
605.92,209.55,
607.01,211.17,
607.94,212.96,
608.69,214.92,
609.28,217.05,
609.70,219.34,
609.95,221.81,
610.03,224.45
  ]);
end;
//------------------------------------------------------------------------------

function clipping: TArrayOfArrayOfFloatPoint;
begin
  SetLength(result, 14);
  result[0] := MakeArrayOfFloatPoints([
117.45,298.36,
128.28,301.66,
128.34,304.55,
128.23,307.82,
127.88,310.88,
127.31,313.72,
126.50,316.36,
125.46,318.79,
124.19,321.00,
122.69,323.00,
120.96,324.80,
119.00,326.38,
116.81,327.75,
114.39,328.91,
111.73,329.86,
108.85,330.60,
105.73,331.13,
102.39,331.44,
98.81,331.55,
94.57,331.41,
90.61,330.99,
86.91,330.30,
83.49,329.33,
80.35,328.08,
77.47,326.55,
74.88,324.75,
72.55,322.67,
70.50,320.31,
68.72,317.67,
67.22,314.76,
65.99,311.57,
65.03,308.10,
64.34,304.36,
63.93,300.33,
63.80,296.03,
63.96,291.70,
64.43,287.59,
65.23,283.71,
66.35,280.05,
67.78,276.62,
69.53,273.41,
71.60,270.42,
73.99,267.66,
76.65,265.18,
79.52,263.03,
82.62,261.21,
85.93,259.72,
89.46,258.57,
93.20,257.74,
97.16,257.24,
101.34,257.08,
104.33,257.17,
107.13,257.43,
109.73,257.86,
112.14,258.48,
114.36,259.26,
116.39,260.22,
118.22,261.36,
119.86,262.67,
121.31,264.15,
122.56,265.81,
123.62,267.65,
124.49,269.66,
125.16,271.84,
125.65,274.20,
125.93,276.73,
126.03,279.44,
114.00,285.28,
114.14,278.53,
113.98,274.97,
113.50,271.89,
112.71,269.28,
111.59,267.14,
110.16,265.48,
108.41,264.29,
106.34,263.58,
103.95,263.34,
102.32,263.46,
100.79,263.81,
99.37,264.39,
98.05,265.21,
96.83,266.26,
95.73,267.54,
94.72,269.05,
93.83,270.80,
93.04,272.78,
92.35,274.99,
91.77,277.43,
91.30,280.11,
90.93,283.02,
90.66,286.17,
90.51,289.55,
90.45,293.16,
90.50,297.58,
90.63,301.64,
90.86,305.35,
91.17,308.69,
91.58,311.66,
92.07,314.28,
92.66,316.54,
93.34,318.43,
94.13,320.04,
95.08,321.43,
96.19,322.60,
97.45,323.57,
98.86,324.32,
100.42,324.85,
102.14,325.17,
104.02,325.28,
105.74,325.21,
107.36,324.99,
108.87,324.63,
110.26,324.13,
111.55,323.48,
112.72,322.68,
113.78,321.74,
114.73,320.66,
115.56,319.43,
116.29,318.06,
116.90,316.54,
117.40,314.88,
117.79,313.08,
118.07,311.13,
118.24,309.04,
118.30,306.80,
118.24,305.29,
118.09,303.38,
117.82,301.07,
117.45,298.36
  ]);

  result[1] := MakeArrayOfFloatPoints([
162.56,232.61,
162.56,330.00,
136.89,330.00,
136.89,234.02,
142.48,233.93,
148.62,233.66,
155.32,233.22,
162.56,232.61
  ]);

  result[2] := MakeArrayOfFloatPoints([
190.39,231.63,
193.19,231.77,
195.62,232.21,
197.67,232.93,
199.36,233.95,
200.66,235.25,
201.60,236.85,
202.16,238.73,
202.34,240.91,
202.16,243.08,
201.60,244.97,
200.66,246.56,
199.36,247.87,
197.67,248.88,
195.62,249.61,
193.19,250.04,
190.39,250.19,
187.59,250.04,
185.16,249.61,
183.11,248.88,
181.43,247.87,
180.12,246.56,
179.18,244.97,
178.62,243.08,
178.44,240.91,
178.62,238.73,
179.18,236.85,
180.12,235.25,
181.43,233.95,
183.11,232.93,
185.16,232.21,
187.59,231.77,
190.39,231.63
  ]);

  result[3] := MakeArrayOfFloatPoints([
177.39,330.00,
177.39,259.19,
183.50,259.07,
189.81,258.71,
196.33,258.12,
203.05,257.30,
203.05,330.00
  ]);

  result[4] := MakeArrayOfFloatPoints([
217.89,353.97,
217.89,259.19,
223.58,259.07,
229.76,258.73,
236.42,258.16,
243.56,257.36,
243.56,268.05,
245.42,265.53,
247.37,263.34,
249.43,261.50,
251.57,259.98,
253.82,258.81,
256.16,257.97,
258.60,257.46,
261.14,257.30,
263.83,257.45,
266.38,257.93,
268.79,258.72,
271.07,259.82,
273.20,261.24,
275.20,262.97,
277.06,265.02,
278.78,267.38,
280.33,270.01,
281.67,272.85,
282.81,275.91,
283.74,279.19,
284.46,282.67,
284.98,286.37,
285.29,290.29,
285.39,294.42,
285.29,298.96,
285.00,303.20,
284.51,307.16,
283.83,310.81,
282.95,314.18,
281.88,317.25,
280.61,320.04,
279.15,322.52,
277.50,324.72,
275.64,326.62,
273.60,328.23,
271.35,329.55,
268.92,330.57,
266.29,331.31,
263.46,331.74,
260.44,331.89,
257.93,331.77,
255.53,331.41,
253.25,330.80,
251.09,329.96,
249.03,328.87,
247.10,327.54,
245.27,325.97,
243.56,324.16,
243.56,353.97
  ]);

  result[5] := MakeArrayOfFloatPoints([
251.78,267.63,
250.75,267.73,
249.79,268.04,
248.89,268.55,
248.06,269.28,
247.30,270.21,
246.60,271.34,
245.97,272.69,
245.41,274.23,
244.91,275.99,
244.48,277.95,
244.11,280.12,
243.81,282.50,
243.58,285.08,
243.41,287.87,
243.31,290.86,
243.28,294.06,
243.31,297.39,
243.41,300.51,
243.57,303.41,
243.79,306.09,
244.08,308.56,
244.43,310.82,
244.84,312.86,
245.32,314.69,
245.86,316.30,
246.47,317.70,
247.14,318.88,
247.87,319.84,
248.67,320.60,
249.53,321.13,
250.45,321.46,
251.44,321.56,
252.32,321.46,
253.15,321.13,
253.92,320.60,
254.64,319.84,
255.29,318.88,
255.89,317.70,
256.44,316.30,
256.92,314.69,
257.35,312.86,
257.72,310.82,
258.04,308.56,
258.29,306.09,
258.49,303.41,
258.64,300.51,
258.72,297.39,
258.75,294.06,
258.72,290.86,
258.64,287.87,
258.51,285.08,
258.31,282.50,
258.07,280.12,
257.77,277.95,
257.42,275.99,
257.01,274.23,
256.55,272.69,
256.03,271.34,
255.46,270.21,
254.83,269.28,
254.15,268.55,
253.41,268.04,
252.63,267.73,
251.78,267.63
  ]);

  result[6] := MakeArrayOfFloatPoints([
295.89,353.97,
295.89,259.19,
301.58,259.07,
307.76,258.73,
314.42,258.16,
321.56,257.36,
321.56,268.05,
323.42,265.53,
325.37,263.34,
327.43,261.50,
329.57,259.98,
331.82,258.81,
334.16,257.97,
336.60,257.46,
339.14,257.30,
341.83,257.45,
344.38,257.93,
346.79,258.72,
349.07,259.82,
351.20,261.24,
353.20,262.97,
355.06,265.02,
356.78,267.38,
358.33,270.01,
359.67,272.85,
360.81,275.91,
361.74,279.19,
362.46,282.67,
362.98,286.37,
363.29,290.29,
363.39,294.42,
363.29,298.96,
363.00,303.20,
362.51,307.16,
361.83,310.81,
360.95,314.18,
359.88,317.25,
358.61,320.04,
357.15,322.52,
355.50,324.72,
353.64,326.62,
351.60,328.23,
349.35,329.55,
346.92,330.57,
344.29,331.31,
341.46,331.74,
338.44,331.89,
335.93,331.77,
333.53,331.41,
331.25,330.80,
329.09,329.96,
327.03,328.87,
325.10,327.54,
323.27,325.97,
321.56,324.16,
321.56,353.97
  ]);

  result[7] := MakeArrayOfFloatPoints([
329.78,267.63,
328.75,267.73,
327.79,268.04,
326.89,268.55,
326.06,269.28,
325.30,270.21,
324.60,271.34,
323.97,272.69,
323.41,274.23,
322.91,275.99,
322.48,277.95,
322.11,280.12,
321.81,282.50,
321.58,285.08,
321.41,287.87,
321.31,290.86,
321.28,294.06,
321.31,297.39,
321.41,300.51,
321.57,303.41,
321.79,306.09,
322.08,308.56,
322.43,310.82,
322.84,312.86,
323.32,314.69,
323.86,316.30,
324.47,317.70,
325.14,318.88,
325.87,319.84,
326.67,320.60,
327.53,321.13,
328.45,321.46,
329.44,321.56,
330.32,321.46,
331.15,321.13,
331.92,320.60,
332.64,319.84,
333.29,318.88,
333.89,317.70,
334.44,316.30,
334.92,314.69,
335.35,312.86,
335.72,310.82,
336.04,308.56,
336.29,306.09,
336.49,303.41,
336.64,300.51,
336.72,297.39,
336.75,294.06,
336.72,290.86,
336.64,287.87,
336.51,285.08,
336.31,282.50,
336.07,280.12,
335.77,277.95,
335.42,275.99,
335.01,274.23,
334.55,272.69,
334.03,271.34,
333.46,270.21,
332.83,269.28,
332.15,268.55,
331.41,268.04,
330.63,267.73,
329.78,267.63
  ]);

  result[8] := MakeArrayOfFloatPoints([
387.39,231.63,
390.19,231.77,
392.62,232.21,
394.67,232.93,
396.36,233.95,
397.66,235.25,
398.60,236.85,
399.16,238.73,
399.34,240.91,
399.16,243.08,
398.60,244.97,
397.66,246.56,
396.36,247.87,
394.67,248.88,
392.62,249.61,
390.19,250.04,
387.39,250.19,
384.59,250.04,
382.16,249.61,
380.11,248.88,
378.43,247.87,
377.12,246.56,
376.18,244.97,
375.62,243.08,
375.44,240.91,
375.62,238.73,
376.18,236.85,
377.12,235.25,
378.43,233.95,
380.11,232.93,
382.16,232.21,
384.59,231.77,
387.39,231.63
  ]);

  result[9] := MakeArrayOfFloatPoints([
374.39,330.00,
374.39,259.19,
380.50,259.07,
386.81,258.71,
393.33,258.12,
400.05,257.30,
400.05,330.00
  ]);

  result[10] := MakeArrayOfFloatPoints([
482.11,330.00,
456.45,330.00,
456.45,277.97,
456.38,276.10,
456.18,274.49,
455.83,273.12,
455.34,272.00,
454.72,271.13,
453.96,270.51,
453.06,270.14,
452.02,270.02,
449.84,270.41,
447.81,271.59,
445.94,273.56,
444.21,276.31,
442.77,279.60,
441.73,283.18,
441.11,287.04,
440.91,291.19,
440.91,330.00,
415.25,330.00,
415.25,258.98,
421.81,258.87,
428.27,258.54,
434.64,257.99,
440.91,257.22,
440.91,270.52,
443.36,267.42,
445.95,264.73,
448.67,262.46,
451.52,260.60,
454.51,259.16,
457.62,258.12,
460.87,257.50,
464.25,257.30,
466.41,257.37,
468.44,257.58,
470.32,257.93,
472.06,258.43,
473.67,259.07,
475.13,259.85,
476.46,260.77,
477.64,261.83,
478.69,263.04,
479.60,264.38,
480.37,265.87,
480.99,267.50,
481.48,269.27,
481.83,271.19,
482.04,273.24,
482.11,275.44
  ]);

  result[11] := MakeArrayOfFloatPoints([
543.30,259.83,
547.50,261.85,
551.14,264.09,
554.23,266.55,
556.75,269.23,
558.71,272.12,
560.11,275.23,
560.95,278.56,
561.23,282.11,
561.09,284.48,
560.67,286.75,
559.97,288.94,
558.98,291.04,
557.72,293.06,
556.17,294.98,
554.34,296.82,
552.23,298.57,
549.93,300.17,
547.50,301.55,
544.96,302.73,
542.30,303.69,
539.53,304.43,
536.63,304.96,
533.63,305.28,
530.50,305.39,
527.82,305.31,
524.72,305.07,
521.18,304.68,
517.22,304.13,
515.09,305.53,
513.57,306.94,
512.66,308.34,
512.36,309.75,
512.45,310.65,
512.73,311.44,
513.20,312.10,
513.86,312.64,
514.70,313.07,
515.73,313.37,
516.94,313.55,
518.34,313.61,
519.31,313.59,
520.68,313.54,
522.44,313.45,
524.59,313.33,
530.13,312.99,
534.86,312.75,
538.78,312.61,
541.89,312.56,
544.99,312.64,
547.89,312.87,
550.59,313.24,
553.09,313.78,
555.39,314.46,
557.49,315.29,
559.39,316.28,
561.09,317.41,
562.59,318.70,
563.89,320.14,
564.98,321.73,
565.88,323.48,
566.58,325.37,
567.08,327.42,
567.38,329.62,
567.48,331.97,
567.32,334.81,
566.82,337.47,
565.99,339.95,
564.83,342.24,
563.34,344.35,
561.52,346.28,
559.37,348.02,
556.89,349.58,
554.07,350.96,
550.93,352.15,
547.45,353.16,
543.64,353.99,
539.50,354.63,
535.03,355.09,
530.23,355.36,
525.09,355.45,
521.27,355.40,
517.69,355.25,
514.36,354.99,
511.28,354.62,
508.44,354.15,
505.85,353.58,
503.51,352.91,
501.41,352.13,
499.56,351.25,
497.96,350.26,
496.60,349.17,
495.49,347.97,
494.63,346.68,
494.01,345.27,
493.64,343.77,
493.52,342.16,
493.72,340.32,
494.32,338.63,
495.32,337.10,
496.71,335.73,
498.51,334.50,
500.71,333.43,
503.31,332.51,
506.31,331.75,
503.12,330.78,
500.34,329.67,
498.00,328.40,
496.08,326.99,
494.59,325.43,
493.52,323.73,
492.89,321.88,
492.67,319.88,
492.93,317.33,
493.69,314.86,
494.96,312.46,
496.73,310.15,
499.02,307.91,
501.81,305.75,
505.11,303.66,
508.92,301.66,
505.57,300.09,
502.67,298.27,
500.22,296.20,
498.21,293.87,
496.65,291.29,
495.53,288.46,
494.86,285.38,
494.64,282.05,
494.78,279.46,
495.18,276.99,
495.86,274.62,
496.80,272.35,
498.02,270.19,
499.51,268.14,
501.26,266.20,
503.29,264.36,
505.52,262.69,
507.87,261.24,
510.36,260.01,
512.97,259.00,
515.72,258.22,
518.60,257.67,
521.60,257.33,
524.73,257.22,
527.09,257.28,
529.78,257.45,
532.82,257.74,
536.20,258.14,
535.93,255.94,
535.84,254.27,
536.07,251.00,
536.75,248.17,
537.89,245.78,
539.48,243.82,
541.53,242.30,
544.04,241.21,
546.99,240.56,
550.41,240.34,
553.12,240.50,
555.48,240.96,
557.47,241.72,
559.10,242.79,
560.37,244.16,
561.28,245.85,
561.82,247.83,
562.00,250.13,
561.89,251.87,
561.57,253.39,
561.02,254.67,
560.26,255.71,
559.28,256.53,
558.09,257.11,
556.68,257.46,
555.05,257.58,
553.83,257.48,
552.51,257.19,
551.09,256.71,
549.56,256.03,
547.84,255.27,
546.61,254.97,
545.83,255.00,
545.16,255.20,
544.59,255.56,
544.13,256.08,
543.76,256.77,
543.50,257.63,
543.35,258.64,
543.30,259.83
  ]);

  result[12] := MakeArrayOfFloatPoints([
527.48,264.19,
525.80,264.47,
524.35,265.30,
523.11,266.70,
522.11,268.65,
521.32,271.16,
520.76,274.23,
520.42,277.86,
520.31,282.05,
520.43,285.88,
520.78,289.21,
521.36,292.03,
522.18,294.33,
523.22,296.12,
524.50,297.40,
526.02,298.17,
527.77,298.42,
529.36,298.19,
530.75,297.51,
531.92,296.38,
532.88,294.79,
533.62,292.74,
534.15,290.24,
534.47,287.28,
534.58,283.88,
534.47,279.26,
534.13,275.26,
533.58,271.88,
532.80,269.11,
531.81,266.96,
530.59,265.42,
529.15,264.50,
527.48,264.19
  ]);

  result[13] := MakeArrayOfFloatPoints([
526.78,334.64,
522.58,334.75,
518.93,335.08,
515.85,335.62,
513.33,336.38,
511.37,337.36,
509.96,338.55,
509.12,339.96,
508.84,341.59,
509.12,343.21,
509.93,344.61,
511.29,345.79,
513.19,346.76,
515.63,347.52,
518.62,348.05,
522.15,348.38,
526.22,348.48,
530.95,348.36,
535.04,348.00,
538.51,347.40,
541.35,346.55,
543.55,345.46,
545.13,344.13,
546.08,342.56,
546.39,340.75,
546.08,339.32,
545.17,338.08,
543.63,337.03,
541.49,336.17,
538.73,335.50,
535.36,335.02,
531.38,334.74,
526.78,334.64
  ]);
end;
//------------------------------------------------------------------------------


function australia: TArrayOfArrayOfFloatPoint;
begin
  SetLength(result, 2);
  result[0] := MakeArrayOfFloatPoints([
524.60,198.00,
524.60,199.30,
524.60,200.60,
525.90,201.90,
525.90,203.20,
525.90,204.50,
527.20,204.50,
528.50,204.50,
527.20,205.80,
528.50,207.10,
528.50,208.40,
528.50,209.70,
528.50,211.00,
529.80,212.30,
529.80,213.60,
531.10,214.90,
531.10,217.50,
532.40,216.20,
533.70,217.50,
535.00,218.80,
535.00,217.50,
533.70,216.20,
533.70,214.90,
535.00,213.60,
536.30,213.60,
536.30,214.90,
537.60,216.20,
538.90,216.20,
540.20,217.50,
541.50,217.50,
542.80,218.80,
542.80,217.50,
541.50,216.20,
542.80,214.90,
544.10,216.20,
544.10,217.50,
545.40,218.80,
545.40,220.10,
545.40,221.40,
545.40,222.70,
545.40,224.00,
545.40,225.30,
545.40,226.60,
545.40,227.90,
545.40,229.20,
546.70,230.50,
546.70,231.80,
548.00,231.80,
549.30,231.80,
550.60,233.10,
551.90,234.40,
553.20,235.70,
554.50,237.00,
555.80,238.30,
557.10,238.30,
555.80,237.00,
557.10,238.30,
558.40,239.60,
559.70,239.60,
561.00,240.90,
561.00,242.20,
562.30,243.50,
563.60,244.80,
564.90,246.10,
566.20,246.10,
567.50,247.40,
567.50,248.70,
567.50,250.00,
568.80,251.30,
570.10,252.60,
571.40,253.90,
572.70,253.90,
572.70,255.20,
574.00,256.50,
572.70,257.80,
572.70,259.10,
574.00,260.40,
574.00,261.70,
575.30,261.70,
575.30,263.00,
575.30,264.30,
575.30,265.60,
575.30,266.90,
575.30,269.50,
575.30,270.80,
575.30,272.10,
575.30,273.40,
575.30,274.70,
576.60,276.00,
576.60,277.30,
575.30,277.30,
574.00,278.60,
575.30,279.90,
576.60,281.20,
576.60,282.50,
577.90,283.80,
577.90,285.10,
579.20,286.40,
579.20,287.70,
579.20,289.00,
579.20,290.30,
580.50,291.60,
581.80,292.90,
581.80,294.20,
581.80,295.50,
581.80,296.80,
581.80,298.10,
581.80,299.40,
581.80,300.70,
580.50,302.00,
579.20,303.30,
579.20,304.60,
577.90,305.90,
579.20,307.20,
579.20,308.50,
577.90,309.80,
577.90,311.10,
577.90,312.40,
577.90,313.70,
576.60,315.00,
576.60,316.30,
576.60,317.60,
575.30,318.90,
575.30,320.20,
574.00,321.50,
574.00,322.80,
574.00,324.10,
574.00,325.40,
575.30,326.70,
575.30,328.00,
574.00,329.30,
574.00,330.60,
574.00,331.90,
572.70,333.20,
572.70,334.50,
572.70,335.80,
571.40,337.10,
571.40,338.40,
570.10,339.70,
568.80,341.00,
567.50,342.30,
568.80,343.60,
568.80,344.90,
567.50,346.20,
566.20,347.50,
564.90,347.50,
563.60,348.80,
562.30,350.10,
562.30,351.40,
561.00,351.40,
559.70,351.40,
558.40,352.70,
557.10,354.00,
557.10,355.30,
555.80,356.60,
555.80,357.90,
554.50,357.90,
554.50,359.20,
553.20,360.50,
551.90,361.80,
550.60,360.50,
551.90,361.80,
551.90,363.10,
551.90,364.40,
551.90,365.70,
550.60,367.00,
550.60,368.30,
549.30,369.60,
548.00,370.90,
546.70,372.20,
546.70,373.50,
545.40,373.50,
546.70,374.80,
546.70,376.10,
545.40,377.40,
544.10,378.70,
545.40,380.00,
544.10,380.00,
544.10,381.30,
542.80,382.60,
541.50,383.90,
541.50,385.20,
540.20,386.50,
540.20,387.80,
538.90,389.10,
537.60,389.10,
537.60,390.40,
537.60,391.70,
537.60,393.00,
536.30,394.30,
536.30,395.60,
536.30,396.90,
536.30,398.20,
536.30,399.50,
535.00,400.80,
535.00,402.10,
533.70,404.70,
533.70,406.00,
533.70,407.30,
535.00,408.60,
535.00,409.90,
533.70,409.90,
533.70,411.20,
535.00,412.50,
533.70,413.80,
532.40,412.50,
531.10,413.80,
529.80,415.10,
528.50,416.40,
527.20,416.40,
525.90,416.40,
524.60,416.40,
523.30,416.40,
522.00,416.40,
520.70,416.40,
519.40,416.40,
518.10,416.40,
516.80,416.40,
515.50,416.40,
514.20,416.40,
512.90,416.40,
511.60,417.70,
510.30,417.70,
509.00,417.70,
507.70,417.70,
505.10,419.00,
503.80,419.00,
502.50,420.30,
501.20,421.60,
499.90,422.90,
498.60,422.90,
497.30,424.20,
496.00,425.50,
494.70,426.80,
493.40,428.10,
492.10,428.10,
490.80,428.10,
489.50,428.10,
488.20,428.10,
486.90,428.10,
485.60,428.10,
485.60,429.40,
486.90,430.70,
488.20,430.70,
488.20,432.00,
489.50,433.30,
488.20,433.30,
486.90,432.00,
485.60,430.70,
484.30,429.40,
483.00,429.40,
481.70,430.70,
481.70,429.40,
480.40,428.10,
479.10,428.10,
477.80,428.10,
476.50,426.80,
475.20,425.50,
475.20,424.20,
476.50,424.20,
476.50,422.90,
475.20,421.60,
473.90,421.60,
472.60,422.90,
472.60,424.20,
471.30,424.20,
470.00,425.50,
468.70,425.50,
467.40,424.20,
466.10,424.20,
467.40,424.20,
468.70,424.20,
470.00,422.90,
471.30,421.60,
471.30,420.30,
470.00,419.00,
470.00,417.70,
468.70,417.70,
467.40,419.00,
466.10,419.00,
464.80,420.30,
463.50,420.30,
462.20,420.30,
463.50,421.60,
464.80,421.60,
466.10,420.30,
466.10,421.60,
464.80,422.90,
463.50,422.90,
462.20,422.90,
460.90,424.20,
459.60,424.20,
458.30,425.50,
457.00,426.80,
455.70,428.10,
453.10,428.10,
451.80,429.40,
450.50,430.70,
449.20,429.40,
447.90,429.40,
446.60,429.40,
445.30,428.10,
444.00,426.80,
442.70,426.80,
441.40,426.80,
440.10,425.50,
438.80,425.50,
437.50,424.20,
436.20,424.20,
434.90,424.20,
433.60,424.20,
432.30,424.20,
431.00,422.90,
429.70,422.90,
428.40,422.90,
427.10,422.90,
425.80,424.20,
424.50,424.20,
423.20,424.20,
421.90,422.90,
420.60,421.60,
419.30,420.30,
418.00,420.30,
416.70,420.30,
415.40,420.30,
414.10,420.30,
412.80,419.00,
411.50,419.00,
410.20,417.70,
408.90,416.40,
408.90,415.10,
407.60,413.80,
406.30,412.50,
405.00,412.50,
403.70,411.20,
402.40,409.90,
402.40,408.60,
402.40,407.30,
401.10,406.00,
402.40,404.70,
403.70,403.40,
403.70,402.10,
402.40,400.80,
402.40,399.50,
401.10,398.20,
401.10,396.90,
399.80,395.60,
399.80,394.30,
398.50,393.00,
397.20,391.70,
395.90,390.40,
394.60,389.10,
393.30,389.10,
392.00,387.80,
393.30,387.80,
394.60,389.10,
395.90,390.40,
397.20,391.70,
398.50,393.00,
399.80,394.30,
399.80,395.60,
399.80,394.30,
398.50,393.00,
397.20,391.70,
395.90,390.40,
394.60,389.10,
393.30,389.10,
393.30,387.80,
394.60,386.50,
394.60,387.80,
395.90,389.10,
397.20,387.80,
395.90,386.50,
397.20,386.50,
397.20,385.20,
395.90,383.90,
394.60,385.20,
393.30,385.20,
392.00,385.20,
389.40,386.50,
392.00,386.50,
389.40,387.80,
388.10,386.50,
386.80,387.80,
385.50,389.10,
384.20,389.10,
382.90,389.10,
381.60,389.10,
380.30,387.80,
380.30,386.50,
381.60,386.50,
382.90,385.20,
384.20,383.90,
385.50,382.60,
385.50,381.30,
385.50,380.00,
385.50,378.70,
385.50,377.40,
385.50,376.10,
384.20,374.80,
382.90,373.50,
382.90,372.20,
381.60,370.90,
381.60,369.60,
380.30,369.60,
379.00,370.90,
379.00,372.20,
377.70,373.50,
377.70,374.80,
377.70,376.10,
377.70,377.40,
376.40,378.70,
376.40,380.00,
375.10,381.30,
375.10,382.60,
373.80,381.30,
372.50,381.30,
371.20,381.30,
369.90,382.60,
368.60,382.60,
367.30,382.60,
366.00,383.90,
364.70,383.90,
364.70,382.60,
366.00,381.30,
366.00,380.00,
367.30,378.70,
368.60,378.70,
369.90,378.70,
371.20,380.00,
372.50,378.70,
372.50,377.40,
372.50,376.10,
372.50,374.80,
372.50,372.20,
372.50,370.90,
372.50,369.60,
372.50,368.30,
372.50,367.00,
373.80,365.70,
373.80,364.40,
375.10,363.10,
376.40,361.80,
377.70,361.80,
377.70,360.50,
377.70,359.20,
376.40,357.90,
377.70,356.60,
379.00,356.60,
379.00,354.00,
377.70,352.70,
377.70,351.40,
377.70,350.10,
376.40,348.80,
376.40,347.50,
376.40,348.80,
376.40,350.10,
376.40,351.40,
376.40,352.70,
375.10,354.00,
373.80,355.30,
372.50,355.30,
371.20,356.60,
371.20,357.90,
371.20,359.20,
369.90,360.50,
368.60,363.10,
367.30,363.10,
366.00,363.10,
364.70,363.10,
363.40,364.40,
362.10,365.70,
360.80,365.70,
359.50,367.00,
358.20,367.00,
356.90,368.30,
356.90,369.60,
355.60,370.90,
354.30,372.20,
354.30,373.50,
353.00,373.50,
351.70,374.80,
351.70,376.10,
350.40,377.40,
351.70,377.40,
353.00,376.10,
353.00,377.40,
353.00,378.70,
351.70,378.70,
350.40,378.70,
349.10,378.70,
347.80,378.70,
346.50,377.40,
345.20,376.10,
343.90,374.80,
342.60,374.80,
342.60,373.50,
343.90,373.50,
345.20,374.80,
346.50,374.80,
345.20,373.50,
345.20,372.20,
345.20,370.90,
343.90,369.60,
343.90,368.30,
343.90,367.00,
342.60,365.70,
341.30,364.40,
340.00,363.10,
338.70,363.10,
338.70,361.80,
338.70,360.50,
337.40,359.20,
336.10,357.90,
336.10,356.60,
334.80,355.30,
334.80,356.60,
333.50,356.60,
332.20,356.60,
330.90,356.60,
330.90,355.30,
329.60,354.00,
329.60,352.70,
328.30,352.70,
328.30,351.40,
328.30,350.10,
329.60,350.10,
330.90,350.10,
330.90,348.80,
329.60,347.50,
328.30,347.50,
327.00,347.50,
325.70,347.50,
325.70,346.20,
325.70,344.90,
324.40,344.90,
323.10,343.60,
321.80,342.30,
320.50,343.60,
319.20,342.30,
317.90,343.60,
316.60,343.60,
315.30,343.60,
314.00,342.30,
312.70,341.00,
311.40,341.00,
310.10,341.00,
308.80,339.70,
307.50,341.00,
306.20,341.00,
304.90,341.00,
303.60,341.00,
302.30,339.70,
301.00,339.70,
299.70,338.40,
298.40,337.10,
297.10,337.10,
295.80,335.80,
294.50,335.80,
293.20,334.50,
291.90,334.50,
290.60,334.50,
289.30,334.50,
288.00,335.80,
286.70,335.80,
285.40,335.80,
284.10,335.80,
281.50,335.80,
280.20,335.80,
278.90,335.80,
277.60,335.80,
276.30,335.80,
275.00,335.80,
273.70,335.80,
272.40,335.80,
271.10,335.80,
269.80,335.80,
268.50,335.80,
267.20,335.80,
265.90,337.10,
264.60,337.10,
263.30,337.10,
262.00,337.10,
260.70,337.10,
259.40,338.40,
258.10,338.40,
256.80,339.70,
255.50,339.70,
254.20,341.00,
252.90,341.00,
251.60,341.00,
250.30,342.30,
249.00,342.30,
247.70,342.30,
246.40,342.30,
245.10,343.60,
243.80,343.60,
242.50,343.60,
239.90,344.90,
238.60,344.90,
237.30,344.90,
236.00,344.90,
234.70,344.90,
233.40,344.90,
232.10,344.90,
230.80,344.90,
229.50,344.90,
228.20,344.90,
226.90,344.90,
225.60,343.60,
224.30,344.90,
223.00,344.90,
221.70,344.90,
220.40,344.90,
219.10,346.20,
217.80,347.50,
216.50,348.80,
215.20,348.80,
213.90,348.80,
212.60,350.10,
211.30,350.10,
210.00,351.40,
208.70,351.40,
207.40,352.70,
206.10,352.70,
204.80,352.70,
203.50,352.70,
202.20,354.00,
200.90,354.00,
199.60,355.30,
198.30,356.60,
198.30,357.90,
197.00,359.20,
197.00,360.50,
195.70,361.80,
194.40,363.10,
193.10,364.40,
191.80,365.70,
190.50,365.70,
189.20,365.70,
187.90,365.70,
186.60,367.00,
185.30,365.70,
184.00,365.70,
182.70,365.70,
181.40,365.70,
180.10,365.70,
178.80,365.70,
177.50,365.70,
176.20,365.70,
174.90,365.70,
173.60,367.00,
172.30,367.00,
172.30,365.70,
171.00,364.40,
169.70,365.70,
168.40,365.70,
167.10,365.70,
165.80,364.40,
164.50,364.40,
163.20,364.40,
161.90,364.40,
160.60,365.70,
159.30,365.70,
158.00,365.70,
156.70,365.70,
155.40,365.70,
154.10,365.70,
152.80,365.70,
151.50,367.00,
150.20,367.00,
148.90,365.70,
146.30,365.70,
145.00,365.70,
143.70,367.00,
142.40,367.00,
141.10,367.00,
139.80,368.30,
139.80,369.60,
138.50,370.90,
138.50,372.20,
137.20,372.20,
137.20,373.50,
135.90,373.50,
134.60,373.50,
133.30,373.50,
132.00,373.50,
130.70,373.50,
129.40,373.50,
128.10,374.80,
126.80,376.10,
125.50,376.10,
124.20,377.40,
124.20,378.70,
122.90,378.70,
121.60,378.70,
120.30,380.00,
119.00,380.00,
117.70,380.00,
119.00,381.30,
117.70,381.30,
116.40,381.30,
115.10,381.30,
113.80,381.30,
112.50,381.30,
111.20,380.00,
109.90,380.00,
108.60,380.00,
107.30,380.00,
106.00,380.00,
104.70,381.30,
103.40,380.00,
100.80,380.00,
99.50,380.00,
98.20,380.00,
98.20,378.70,
96.90,378.70,
95.60,378.70,
94.30,377.40,
93.00,377.40,
91.70,376.10,
90.40,374.80,
89.10,373.50,
87.80,373.50,
86.50,372.20,
85.20,372.20,
83.90,370.90,
82.60,370.90,
81.30,372.20,
80.00,370.90,
80.00,369.60,
80.00,368.30,
80.00,367.00,
80.00,365.70,
80.00,364.40,
80.00,363.10,
80.00,361.80,
81.30,361.80,
82.60,361.80,
83.90,363.10,
85.20,361.80,
86.50,360.50,
87.80,359.20,
87.80,357.90,
89.10,356.60,
89.10,355.30,
89.10,354.00,
89.10,352.70,
87.80,351.40,
87.80,350.10,
87.80,348.80,
89.10,347.50,
87.80,348.80,
89.10,350.10,
89.10,348.80,
90.40,348.80,
89.10,347.50,
89.10,346.20,
89.10,344.90,
89.10,343.60,
89.10,342.30,
89.10,341.00,
89.10,339.70,
89.10,338.40,
89.10,337.10,
87.80,335.80,
87.80,334.50,
86.50,333.20,
86.50,331.90,
85.20,330.60,
85.20,329.30,
83.90,328.00,
83.90,326.70,
82.60,325.40,
81.30,324.10,
81.30,322.80,
81.30,321.50,
80.00,320.20,
80.00,318.90,
80.00,317.60,
80.00,316.30,
80.00,315.00,
80.00,313.70,
78.70,312.40,
78.70,311.10,
80.00,309.80,
80.00,308.50,
78.70,307.20,
78.70,305.90,
78.70,304.60,
77.40,303.30,
76.10,302.00,
74.80,300.70,
74.80,298.10,
74.80,296.80,
73.50,295.50,
73.50,294.20,
72.20,292.90,
70.90,291.60,
69.60,291.60,
68.30,290.30,
68.30,289.00,
68.30,287.70,
68.30,286.40,
68.30,285.10,
68.30,283.80,
68.30,282.50,
67.00,281.20,
67.00,279.90,
65.70,278.60,
64.40,276.00,
64.40,274.70,
63.10,273.40,
61.80,272.10,
60.50,270.80,
59.20,270.80,
57.90,269.50,
57.90,266.90,
56.60,265.60,
57.90,264.30,
57.90,263.00,
57.90,264.30,
57.90,265.60,
57.90,266.90,
57.90,265.60,
59.20,264.30,
57.90,263.00,
59.20,264.30,
59.20,265.60,
60.50,266.90,
60.50,268.20,
60.50,269.50,
61.80,270.80,
63.10,270.80,
64.40,269.50,
65.70,268.20,
65.70,266.90,
63.10,265.60,
61.80,265.60,
61.80,264.30,
60.50,263.00,
60.50,261.70,
59.20,260.40,
59.20,259.10,
60.50,257.80,
61.80,257.80,
61.80,259.10,
63.10,260.40,
63.10,261.70,
63.10,263.00,
63.10,264.30,
64.40,265.60,
65.70,264.30,
65.70,263.00,
65.70,264.30,
65.70,265.60,
65.70,266.90,
67.00,268.20,
68.30,268.20,
69.60,266.90,
69.60,265.60,
69.60,264.30,
69.60,263.00,
69.60,261.70,
69.60,260.40,
68.30,259.10,
67.00,257.80,
67.00,256.50,
65.70,255.20,
65.70,253.90,
64.40,252.60,
63.10,251.30,
63.10,250.00,
63.10,248.70,
61.80,247.40,
61.80,246.10,
60.50,244.80,
59.20,243.50,
59.20,242.20,
59.20,240.90,
59.20,239.60,
59.20,238.30,
59.20,237.00,
60.50,235.70,
60.50,234.40,
61.80,233.10,
61.80,231.80,
63.10,230.50,
64.40,229.20,
64.40,227.90,
64.40,226.60,
64.40,225.30,
64.40,224.00,
64.40,222.70,
64.40,221.40,
63.10,220.10,
63.10,218.80,
63.10,217.50,
63.10,216.20,
64.40,214.90,
64.40,213.60,
65.70,212.30,
65.70,211.00,
67.00,209.70,
68.30,208.40,
69.60,208.40,
68.30,209.70,
68.30,211.00,
68.30,212.30,
68.30,213.60,
68.30,214.90,
68.30,216.20,
68.30,217.50,
69.60,217.50,
70.90,217.50,
72.20,216.20,
72.20,214.90,
73.50,213.60,
73.50,212.30,
74.80,211.00,
74.80,209.70,
76.10,208.40,
77.40,208.40,
78.70,207.10,
80.00,207.10,
81.30,205.80,
82.60,205.80,
83.90,205.80,
85.20,204.50,
86.50,203.20,
87.80,201.90,
89.10,201.90,
90.40,200.60,
91.70,199.30,
93.00,198.00,
94.30,198.00,
95.60,196.70,
96.90,196.70,
98.20,195.40,
99.50,195.40,
100.80,194.10,
102.10,194.10,
103.40,192.80,
103.40,194.10,
104.70,194.10,
106.00,194.10,
107.30,192.80,
108.60,194.10,
109.90,194.10,
111.20,194.10,
112.50,194.10,
113.80,194.10,
115.10,194.10,
116.40,192.80,
117.70,192.80,
119.00,191.50,
120.30,190.20,
121.60,190.20,
122.90,188.90,
124.20,188.90,
125.50,188.90,
126.80,188.90,
128.10,188.90,
129.40,188.90,
130.70,187.60,
132.00,186.30,
133.30,185.00,
134.60,185.00,
135.90,185.00,
137.20,185.00,
138.50,185.00,
139.80,186.30,
141.10,185.00,
142.40,185.00,
143.70,183.70,
145.00,183.70,
146.30,183.70,
147.60,183.70,
148.90,183.70,
150.20,182.40,
151.50,182.40,
152.80,182.40,
154.10,181.10,
155.40,181.10,
156.70,179.80,
158.00,179.80,
159.30,178.50,
160.60,177.20,
161.90,175.90,
163.20,174.60,
164.50,173.30,
164.50,172.00,
165.80,170.70,
165.80,169.40,
165.80,168.10,
167.10,168.10,
168.40,166.80,
168.40,165.50,
169.70,165.50,
171.00,164.20,
172.30,162.90,
173.60,161.60,
174.90,161.60,
176.20,160.30,
174.90,159.00,
173.60,157.70,
173.60,156.40,
173.60,155.10,
172.30,153.80,
172.30,152.50,
172.30,151.20,
173.60,149.90,
174.90,148.60,
174.90,147.30,
176.20,146.00,
177.50,146.00,
177.50,144.70,
178.80,143.40,
180.10,143.40,
180.10,142.10,
181.40,140.80,
182.70,139.50,
184.00,138.20,
184.00,139.50,
184.00,140.80,
184.00,142.10,
185.30,143.40,
185.30,144.70,
186.60,146.00,
187.90,147.30,
187.90,148.60,
189.20,149.90,
190.50,151.20,
190.50,152.50,
191.80,151.20,
191.80,149.90,
191.80,148.60,
191.80,147.30,
191.80,146.00,
193.10,146.00,
194.40,147.30,
195.70,148.60,
194.40,147.30,
194.40,146.00,
195.70,144.70,
195.70,143.40,
194.40,144.70,
193.10,143.40,
193.10,142.10,
191.80,142.10,
191.80,140.80,
190.50,140.80,
190.50,139.50,
191.80,139.50,
190.50,138.20,
191.80,138.20,
193.10,138.20,
193.10,136.90,
191.80,136.90,
191.80,135.60,
193.10,135.60,
194.40,135.60,
194.40,136.90,
195.70,136.90,
195.70,138.20,
197.00,138.20,
197.00,136.90,
198.30,136.90,
199.60,136.90,
200.90,138.20,
202.20,138.20,
203.50,138.20,
204.80,138.20,
206.10,138.20,
207.40,138.20,
208.70,138.20,
207.40,138.20,
206.10,136.90,
204.80,136.90,
203.50,136.90,
202.20,136.90,
202.20,135.60,
202.20,134.30,
203.50,135.60,
204.80,134.30,
204.80,133.00,
206.10,130.40,
204.80,130.40,
203.50,131.70,
202.20,130.40,
202.20,129.10,
202.20,127.80,
202.20,126.50,
203.50,126.50,
204.80,126.50,
206.10,126.50,
206.10,125.20,
206.10,123.90,
207.40,123.90,
208.70,125.20,
210.00,125.20,
211.30,126.50,
212.60,126.50,
211.30,125.20,
211.30,123.90,
210.00,123.90,
208.70,123.90,
208.70,122.60,
210.00,122.60,
208.70,122.60,
208.70,121.30,
210.00,121.30,
210.00,120.00,
211.30,120.00,
211.30,121.30,
211.30,120.00,
212.60,121.30,
213.90,121.30,
215.20,120.00,
213.90,120.00,
212.60,120.00,
213.90,118.70,
212.60,117.40,
211.30,116.10,
212.60,116.10,
213.90,114.80,
215.20,114.80,
216.50,113.50,
217.80,113.50,
217.80,112.20,
217.80,110.90,
217.80,109.60,
219.10,110.90,
219.10,112.20,
219.10,113.50,
217.80,114.80,
219.10,113.50,
220.40,112.20,
220.40,113.50,
221.70,114.80,
221.70,113.50,
223.00,113.50,
223.00,112.20,
224.30,110.90,
224.30,109.60,
224.30,108.30,
223.00,108.30,
223.00,107.00,
224.30,105.70,
225.60,107.00,
225.60,108.30,
226.90,109.60,
226.90,108.30,
228.20,107.00,
229.50,107.00,
229.50,108.30,
230.80,108.30,
232.10,108.30,
232.10,107.00,
233.40,107.00,
233.40,105.70,
233.40,104.40,
234.70,104.40,
236.00,104.40,
237.30,105.70,
238.60,105.70,
239.90,105.70,
241.20,105.70,
241.20,107.00,
242.50,108.30,
243.80,109.60,
245.10,110.90,
246.40,112.20,
246.40,113.50,
247.70,113.50,
249.00,114.80,
251.60,116.10,
251.60,117.40,
250.30,118.70,
250.30,120.00,
250.30,121.30,
250.30,122.60,
250.30,123.90,
250.30,125.20,
249.00,126.50,
250.30,125.20,
250.30,123.90,
250.30,122.60,
251.60,123.90,
252.90,125.20,
252.90,123.90,
251.60,122.60,
251.60,121.30,
252.90,120.00,
254.20,120.00,
254.20,118.70,
254.20,117.40,
255.50,117.40,
256.80,117.40,
258.10,117.40,
259.40,117.40,
260.70,117.40,
262.00,118.70,
263.30,118.70,
264.60,120.00,
264.60,121.30,
264.60,122.60,
264.60,121.30,
264.60,120.00,
264.60,118.70,
265.90,118.70,
267.20,118.70,
268.50,120.00,
269.80,121.30,
271.10,122.60,
271.10,121.30,
269.80,120.00,
269.80,118.70,
271.10,118.70,
272.40,117.40,
273.70,117.40,
272.40,117.40,
271.10,117.40,
269.80,116.10,
269.80,114.80,
271.10,114.80,
269.80,114.80,
268.50,113.50,
267.20,112.20,
267.20,110.90,
267.20,109.60,
268.50,108.30,
269.80,108.30,
271.10,107.00,
271.10,105.70,
272.40,104.40,
272.40,103.10,
272.40,101.80,
272.40,100.50,
273.70,100.50,
275.00,100.50,
276.30,100.50,
277.60,99.20,
278.90,99.20,
277.60,97.90,
276.30,96.60,
276.30,95.30,
276.30,94.00,
277.60,92.70,
278.90,92.70,
280.20,91.40,
280.20,90.10,
281.50,88.80,
282.80,90.10,
284.10,90.10,
282.80,88.80,
282.80,87.50,
282.80,86.20,
284.10,86.20,
285.40,87.50,
286.70,88.80,
286.70,87.50,
288.00,87.50,
286.70,86.20,
286.70,84.90,
288.00,86.20,
288.00,84.90,
288.00,83.60,
289.30,83.60,
290.60,83.60,
291.90,82.30,
291.90,83.60,
293.20,84.90,
294.50,84.90,
297.10,84.90,
298.40,84.90,
299.70,83.60,
301.00,84.90,
302.30,84.90,
303.60,83.60,
304.90,83.60,
306.20,83.60,
306.20,84.90,
306.20,83.60,
307.50,82.30,
308.80,82.30,
310.10,82.30,
308.80,82.30,
308.80,81.00,
310.10,79.70,
308.80,78.40,
310.10,77.10,
308.80,75.80,
307.50,74.50,
306.20,73.20,
304.90,74.50,
303.60,74.50,
302.30,74.50,
301.00,73.20,
299.70,73.20,
298.40,71.90,
298.40,70.60,
299.70,70.60,
301.00,70.60,
302.30,71.90,
302.30,73.20,
303.60,71.90,
302.30,70.60,
303.60,70.60,
304.90,69.30,
306.20,70.60,
307.50,71.90,
308.80,73.20,
308.80,74.50,
310.10,74.50,
311.40,73.20,
312.70,73.20,
314.00,74.50,
315.30,75.80,
315.30,77.10,
316.60,77.10,
317.90,77.10,
319.20,78.40,
320.50,78.40,
320.50,79.70,
321.80,78.40,
323.10,78.40,
324.40,77.10,
325.70,78.40,
324.40,78.40,
325.70,79.70,
327.00,78.40,
328.30,79.70,
329.60,81.00,
330.90,81.00,
332.20,81.00,
333.50,82.30,
334.80,82.30,
336.10,81.00,
337.40,81.00,
338.70,82.30,
340.00,82.30,
341.30,83.60,
342.60,83.60,
343.90,83.60,
343.90,82.30,
345.20,82.30,
346.50,82.30,
347.80,82.30,
347.80,81.00,
349.10,79.70,
350.40,79.70,
351.70,78.40,
351.70,79.70,
349.10,81.00,
351.70,81.00,
350.40,82.30,
349.10,83.60,
349.10,84.90,
350.40,83.60,
351.70,82.30,
353.00,82.30,
353.00,83.60,
353.00,84.90,
353.00,86.20,
354.30,86.20,
355.60,87.50,
356.90,86.20,
356.90,84.90,
356.90,83.60,
355.60,83.60,
355.60,82.30,
356.90,81.00,
358.20,81.00,
359.50,79.70,
360.80,81.00,
360.80,82.30,
362.10,84.90,
363.40,84.90,
364.70,83.60,
364.70,84.90,
364.70,86.20,
363.40,87.50,
362.10,88.80,
360.80,90.10,
360.80,91.40,
359.50,91.40,
359.50,92.70,
360.80,94.00,
359.50,94.00,
360.80,95.30,
359.50,96.60,
358.20,97.90,
358.20,96.60,
358.20,95.30,
356.90,96.60,
355.60,96.60,
354.30,95.30,
354.30,96.60,
353.00,97.90,
351.70,99.20,
351.70,100.50,
350.40,101.80,
351.70,103.10,
353.00,103.10,
353.00,104.40,
353.00,105.70,
351.70,107.00,
351.70,108.30,
351.70,109.60,
350.40,110.90,
349.10,112.20,
347.80,113.50,
346.50,114.80,
346.50,116.10,
345.20,116.10,
345.20,117.40,
345.20,118.70,
346.50,120.00,
347.80,120.00,
350.40,121.30,
351.70,122.60,
353.00,123.90,
354.30,123.90,
355.60,125.20,
356.90,126.50,
356.90,127.80,
358.20,127.80,
359.50,129.10,
360.80,129.10,
362.10,130.40,
362.10,131.70,
363.40,131.70,
364.70,131.70,
366.00,131.70,
367.30,133.00,
368.60,133.00,
369.90,134.30,
371.20,134.30,
372.50,135.60,
373.80,135.60,
375.10,135.60,
376.40,136.90,
377.70,138.20,
379.00,139.50,
380.30,140.80,
381.60,142.10,
382.90,142.10,
384.20,143.40,
385.50,143.40,
386.80,143.40,
388.10,143.40,
389.40,144.70,
390.70,144.70,
392.00,144.70,
393.30,146.00,
393.30,147.30,
394.60,148.60,
394.60,149.90,
395.90,151.20,
397.20,151.20,
398.50,151.20,
399.80,152.50,
401.10,153.80,
402.40,153.80,
403.70,153.80,
405.00,155.10,
406.30,155.10,
407.60,155.10,
408.90,155.10,
410.20,153.80,
411.50,153.80,
412.80,153.80,
414.10,152.50,
416.70,151.20,
416.70,149.90,
416.70,148.60,
416.70,147.30,
416.70,146.00,
418.00,144.70,
419.30,143.40,
420.60,142.10,
420.60,140.80,
421.90,139.50,
421.90,138.20,
421.90,136.90,
423.20,135.60,
423.20,134.30,
423.20,133.00,
423.20,131.70,
423.20,130.40,
423.20,129.10,
423.20,127.80,
424.50,126.50,
424.50,125.20,
425.80,123.90,
425.80,122.60,
425.80,121.30,
427.10,120.00,
425.80,118.70,
425.80,117.40,
425.80,116.10,
424.50,114.80,
424.50,113.50,
424.50,112.20,
425.80,110.90,
425.80,109.60,
425.80,108.30,
424.50,107.00,
424.50,105.70,
424.50,104.40,
424.50,103.10,
424.50,101.80,
425.80,100.50,
425.80,99.20,
427.10,97.90,
425.80,96.60,
425.80,94.00,
425.80,92.70,
427.10,92.70,
428.40,91.40,
428.40,90.10,
429.70,91.40,
429.70,92.70,
429.70,91.40,
429.70,90.10,
431.00,88.80,
429.70,88.80,
428.40,88.80,
427.10,87.50,
425.80,88.80,
425.80,86.20,
427.10,84.90,
427.10,83.60,
428.40,82.30,
428.40,81.00,
429.70,82.30,
431.00,82.30,
429.70,81.00,
431.00,79.70,
431.00,78.40,
431.00,77.10,
432.30,75.80,
432.30,74.50,
432.30,73.20,
432.30,71.90,
433.60,70.60,
433.60,69.30,
432.30,66.70,
433.60,66.70,
434.90,66.70,
436.20,65.40,
437.50,64.10,
438.80,65.40,
437.50,66.70,
437.50,68.00,
438.80,66.70,
440.10,68.00,
441.40,68.00,
441.40,69.30,
441.40,70.60,
442.70,73.20,
441.40,74.50,
441.40,75.80,
442.70,77.10,
442.70,78.40,
442.70,79.70,
444.00,79.70,
445.30,79.70,
446.60,81.00,
445.30,82.30,
445.30,83.60,
445.30,84.90,
446.60,84.90,
447.90,86.20,
447.90,87.50,
449.20,88.80,
449.20,90.10,
449.20,91.40,
450.50,92.70,
450.50,94.00,
450.50,95.30,
450.50,96.60,
450.50,97.90,
451.80,99.20,
451.80,100.50,
451.80,101.80,
450.50,103.10,
450.50,104.40,
451.80,105.70,
451.80,107.00,
453.10,108.30,
453.10,109.60,
453.10,110.90,
454.40,112.20,
455.70,113.50,
457.00,113.50,
458.30,112.20,
459.60,112.20,
460.90,110.90,
462.20,110.90,
463.50,109.60,
464.80,110.90,
464.80,112.20,
464.80,113.50,
466.10,114.80,
467.40,114.80,
468.70,114.80,
468.70,116.10,
470.00,117.40,
471.30,117.40,
472.60,118.70,
473.90,118.70,
473.90,120.00,
472.60,122.60,
473.90,123.90,
473.90,125.20,
473.90,126.50,
473.90,127.80,
473.90,129.10,
475.20,130.40,
475.20,131.70,
475.20,133.00,
476.50,134.30,
475.20,135.60,
476.50,136.90,
475.20,138.20,
475.20,139.50,
476.50,140.80,
477.80,142.10,
479.10,142.10,
479.10,143.40,
480.40,144.70,
481.70,144.70,
483.00,144.70,
481.70,146.00,
481.70,147.30,
483.00,148.60,
483.00,149.90,
484.30,151.20,
484.30,152.50,
484.30,153.80,
484.30,155.10,
484.30,156.40,
484.30,157.70,
484.30,159.00,
483.00,160.30,
483.00,161.60,
484.30,162.90,
485.60,164.20,
485.60,165.50,
486.90,165.50,
486.90,166.80,
486.90,168.10,
486.90,169.40,
486.90,170.70,
488.20,172.00,
489.50,173.30,
490.80,174.60,
492.10,174.60,
493.40,175.90,
494.70,175.90,
496.00,174.60,
497.30,175.90,
497.30,177.20,
498.60,177.20,
499.90,177.20,
501.20,177.20,
501.20,175.90,
502.50,177.20,
502.50,178.50,
503.80,179.80,
503.80,181.10,
505.10,182.40,
506.40,182.40,
506.40,181.10,
507.70,182.40,
509.00,183.70,
510.30,183.70,
511.60,183.70,
512.90,185.00,
512.90,186.30,
514.20,187.60,
514.20,186.30,
515.50,186.30,
516.80,187.60,
518.10,187.60,
519.40,188.90,
520.70,190.20,
520.70,191.50,
519.40,190.20,
518.10,190.20,
518.10,191.50,
518.10,192.80,
519.40,194.10,
519.40,195.40,
520.70,196.70,
522.00,196.70
  ]);

  result[1] := MakeArrayOfFloatPoints([
509.00,454.10,
510.30,455.40,
511.60,455.40,
512.90,456.70,
512.90,458.00,
512.90,459.30,
512.90,460.60,
512.90,463.20,
512.90,464.50,
512.90,465.80,
512.90,467.10,
512.90,468.40,
512.90,469.70,
512.90,471.00,
512.90,472.30,
512.90,473.60,
512.90,474.90,
512.90,473.60,
511.60,472.30,
511.60,471.00,
510.30,472.30,
510.30,473.60,
509.00,474.90,
509.00,476.20,
509.00,477.50,
507.70,477.50,
507.70,478.80,
507.70,480.10,
507.70,481.40,
509.00,482.70,
509.00,484.00,
509.00,485.30,
509.00,486.60,
507.70,486.60,
506.40,486.60,
505.10,486.60,
503.80,485.30,
505.10,484.00,
506.40,484.00,
507.70,484.00,
506.40,482.70,
505.10,482.70,
503.80,482.70,
502.50,481.40,
502.50,482.70,
501.20,484.00,
502.50,482.70,
501.20,482.70,
499.90,484.00,
499.90,485.30,
498.60,486.60,
498.60,487.90,
497.30,486.60,
496.00,486.60,
497.30,487.90,
496.00,487.90,
496.00,489.20,
496.00,490.50,
494.70,491.80,
493.40,491.80,
492.10,491.80,
490.80,490.50,
489.50,490.50,
488.20,490.50,
486.90,490.50,
485.60,490.50,
484.30,490.50,
483.00,489.20,
484.30,489.20,
485.60,489.20,
484.30,487.90,
483.00,487.90,
481.70,486.60,
480.40,487.90,
480.40,486.60,
479.10,485.30,
477.80,484.00,
476.50,484.00,
475.20,482.70,
475.20,481.40,
475.20,480.10,
473.90,478.80,
472.60,477.50,
472.60,476.20,
472.60,474.90,
472.60,473.60,
473.90,474.90,
475.20,476.20,
475.20,477.50,
476.50,476.20,
475.20,474.90,
473.90,473.60,
472.60,473.60,
473.90,472.30,
472.60,471.00,
471.30,469.70,
470.00,468.40,
468.70,467.10,
468.70,465.80,
467.40,464.50,
467.40,463.20,
466.10,461.90,
466.10,460.60,
466.10,459.30,
464.80,458.00,
466.10,456.70,
466.10,455.40,
466.10,454.10,
467.40,454.10,
468.70,455.40,
470.00,455.40,
471.30,455.40,
472.60,455.40,
473.90,455.40,
475.20,456.70,
476.50,456.70,
477.80,456.70,
479.10,456.70,
480.40,458.00,
481.70,459.30,
483.00,459.30,
484.30,459.30,
485.60,460.60,
486.90,460.60,
488.20,460.60,
489.50,459.30,
490.80,459.30,
492.10,459.30,
494.70,460.60,
493.40,459.30,
494.70,458.00,
496.00,458.00,
497.30,458.00,
498.60,458.00,
499.90,456.70,
501.20,458.00,
502.50,456.70,
503.80,455.40,
506.40,456.70,
507.70,456.70,
507.70,455.40
  ]);
end;
//------------------------------------------------------------------------------

end.
